#!/usr/bin/env node

const childProcess = require('child_process');
const program = require('commander');

const evmConfig = require('./evm-config');
const { color, fatal } = require('./utils/logging');
const depot = require('./utils/depot-tools');
const goma = require('./utils/goma');
const { refreshPathVariable } = require('./utils/refresh-path');

// Refresh the PATH variable at the top of this shell so that retries in the same shell get the latest PATH variable
refreshPathVariable();

program.description('Electron build tool').usage('<command> [commandArgs...]');

program
  .command('init [options] <name>', 'Create a new build config')
  .alias('new')
  .command('sync [gclientArgs...]', 'Get or update source code')
  .command('build [options]', 'Build Electron and other things')
  .alias('make');

program
  .command('start')
  .alias('run')
  .description('Run the Electron executable')
  .allowUnknownOption()
  .action(() => {
    try {
      const exec = evmConfig.execOf(evmConfig.current());
      const args = program.rawArgs.slice(3);
      const opts = { stdio: 'inherit' };
      console.log(color.childExec(exec, args, opts));
      childProcess.execFileSync(exec, args, opts);
    } catch (e) {
      fatal(e);
    }
  })
  .on('--help', () => {
    console.log('');
    console.log('Examples:');
    console.log('');
    console.log('  $ e start .');
    console.log('  $ e start /path/to/app');
    console.log('  $ e start /path/to/app --js-flags');
  });

program
  .command('node')
  .description('Run the Electron build as if it were a Node.js executable')
  .allowUnknownOption()
  .action(() => {
    try {
      const exec = evmConfig.execOf(evmConfig.current());
      const args = program.rawArgs.slice(3);
      const opts = {
        env: { ...process.env, ELECTRON_RUN_AS_NODE: '1' },
        stdio: 'inherit',
      };
      console.log(color.childExec(exec, args, opts));
      childProcess.execFileSync(exec, args, opts);
    } catch (e) {
      fatal(e);
    }
  })
  .on('--help', () => {
    console.log('');
    console.log('Examples:');
    console.log('');
    console.log('  $ e node .');
    console.log('  $ e node /path/to/app');
  });

program.command('debug', 'Run the Electron build with a debugger (gdb or lldb)');

program
  .command('use <name>')
  .description('Use build config <name> when running other `e` commands')
  .action(name => {
    try {
      evmConfig.setCurrent(name);
      console.log(`Now using config ${color.config(name)}`);
    } catch (e) {
      fatal(e);
    }
  });

program
  .command('show <subcommand>', 'Show info about the current build config')
  .command('test [specRunnerArgs...]', `Run Electron's spec runner`)
  .command('pr [options]', 'Open a GitHub URL where you can PR your changes')
  .command('patches <basename>', 'Refresh the patches in $root/src/electron/patches/$basename')
  .command(
    'load-xcode',
    'Loads required versions of Xcode and the macOS SDK and symlinks them.  This may require sudo',
  );

program
  .command('depot-tools')
  .alias('d')
  .description('Run a command from the depot-tools directory with the correct configuration')
  .allowUnknownOption()
  .action(() => {
    const args = process.argv.slice(3);
    if (args.length === 0) {
      console.error(`${color.err} Must provide a command to 'e depot-tools'`);
      process.exit(1);
    }
    let cwd;
    if (args[0] === 'goma_ctl' || args[0] === 'goma_auth') {
      goma.downloadAndPrepare();
      cwd = goma.dir;
      args[0] = `${args[0]}.py`;
      args.unshift('python');
    }

    const { status, error } = depot.spawnSync(evmConfig.current(), args[0], args.slice(1), {
      cwd,
      stdio: 'inherit',
    });
    if (status !== 0) {
      console.error(
        `${color.err} Failed to run command, exit code was "${status}", error was '${error}'`,
      );
    }
    process.exit(status);
  });

program.on('--help', () => {
  console.log(`
See https://github.com/electron/build-tools/blob/master/README.md for usage.`);
});

program.parse(process.argv);
